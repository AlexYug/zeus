//SPDX-License-Identifier: UNLICENSED
pragma solidity 0.4.26;

contract ethmessagebridge {

  struct Message {
    bytes message; // message as bytes, must deserialize
  }

  struct Receipt {
    bytes message;
    bytes response;
    uint64 message_id;
    bool success;
  }

  address msig;

  uint64 last_received_message_id;
  uint64 last_received_foreign_receipt_id;
  uint64 last_generated_local_receipt_id;

  // mapping/linked list of received messages
  mapping (uint64 => Message) public messages;

  // mapping/linked list of local receipts generated by processing messages
  mapping (uint64 => Receipt) public local_receipts;

  // mapping/linked list of foreign receipts generated by processing
  // messages on foreign chain
  mapping (uint64 => Receipt) public foreign_receipts;

  constructor() public {
    msig = msg.sender;
  }

  modifier msigOnly() {
    require(msg.sender == msig, "sender not msig");
    _;
  }

  /**
    * @dev handling the pushing of messages
    *
    * @param _message the message to push
    */
  function pushMessage(Message _message) public msigOnly {
    messages[last_received_message_id + 1] = _message;
    last_received_message_id++;
    onMessage(_message);
  }

  /**
    * @dev handling the pushing of receipts
    *
    * @param _receipt the receipt to push
    */
  function pushReceipt(Receipt _receipt) public msigOnly {
    foreign_receipts[last_received_foreign_receipt_id + 1] = _receipt;
    last_received_foreign_receipt_id++;
    onReceipt(_receipt);
  }

  /**
    * @dev on message hook, unique implementation per consumer
    *
    * @param _message
    */
  function onMessage(_message) internal {
  }

  /**
    * @dev on receipt hook, unique implementation per consumer
    *
    * @param _receipt
    */
  function onReceipt(Receipt _receipt) internal {
  }
}
